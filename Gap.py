import numpy as npfrom math import logimport pandas as pddef merstructure(data,num=2):#num—mer 将数据分为num-gap    i = 0    merstru=[]    while i + num <len(data):        kmer=[]        for n in range(num):            kmer.append(data[i+n*num])        merstru.append(kmer)        i+=1    return merstrudef Dict(name, n):    seq_voc = "ABCDEFGHIKLMNOPQRSTUVWXYZ"    dict_seq = {}    list_seq = ['']    for i in range(n):        lin = []        for l in list_seq:            for j in seq_voc:                lin.append(l+j)        list_seq = lin    for i in list_seq:        dict_seq[i] = 0    df = pd.read_csv('F:\GraghDTA\GraphDTA_update\data\\' + name + '.csv')    for i in df['target_sequence']:        for di in dict_seq.keys():            if i.find(di) != -1:                dict_seq[di] += 1    for i in dict_seq.keys():        dict_seq[i] /= len(df['target_sequence'])    return dict_seqdef MerVector(datas, dict_seq,gap=2):    '''    输入 ：蛋白质肽链数据    输出 ：20*20 的二肽频率矩阵    函数功能 ：将蛋白质输入进来后计算二肽机构，构建20*20 的二肽矩阵，计算二肽频率矩阵后返回    '''    seq_voc = "ABCDEFGHIKLMNOPQRSTUVWXYZ"    det = {v: i for i, v in enumerate(seq_voc)}    mer=merstructure(datas, gap)#将数据二肽化    vector = np.zeros((25, 25))#定义初始化数组    for i2 in mer:        vector[det[i2[0]],det[i2[1]]]+=1#统计每个二肽对应位置的值    vector = (vector / float(len(datas)))    for i in dict_seq.keys():        vector[det[i[0]], det[i[1]]] *= dict_seq[i]    datamax = vector.reshape(1, 25*25)    datamin = np.min(datamax)    datamax = np.max(datamax)    for l1 in range(len(vector)):        for l2 in range(len(vector[l1])):            vector[l1][l2] = float((vector[l1][l2] - datamin) / (datamax - datamin))    return vector.reshape(1, 25*25)